(6 pkt) 1. Napisać program, w którym działają trzy zadania (w tym samym procesie), z których każde wypisuje w pętli kilka razy kolejną liczbę (pierwsze "1", drugie "2", trzecie "3"). Proszę zapewnić, żeby liczby były wypisywane zawsze w kolejności 1 2 3 1 2 3 .... itd., niezależnie od kolejności uruchamiania zadań. Uwaga: wysokość oceny będzie zależeć od poprawności i prostoty implementacji (im prostsza tym lepsza).
(14 pkt) 2. Mając dany program obliczający i rysujący zbiór Julii, napisać jego wersję równoległą w trzech wariantach: (1) wykorzystując parallel for, (2) wykorzystując pmap, (3) w oparciu o mechanizm ręcznego rozdzielania zadań pomiędzy workerów objaśniony na wykładzie i opisany w dokumentacji Julii w sekcji Shared arrays Proszę zmierzyć czas implementacji sekwencyjnej oraz każdego wariantu implementacji równoległej w zależności od liczby workerów (od 1 do liczby rdzeni w procesorze). Wyniki porównania proszę przedstawić na wykresie.
Uwagi:

Pomocny może być przykład pokazujący równoległą	implementację zbioru Mandelbrota w oparciu o parallel for.
Pojedyncze zadanie powinno obliczać jedną lub (najlepiej) więcej kolumn. Jeśli zadania będą zbyt drobne, to koszt wynikający z narzutu zrównoleglania (przełączanie między zadaniami, komunikacja między procesami) przewyższy zyski z podziału pracy na wiele procesów.
